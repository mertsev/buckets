import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import axios from "axios";
export interface CounterState {
  firstBucket: number;
  secondBucket: number;
  goal: number;
  result: any;
  status: "idle" | "loading" | "failed";
}

const initialState: CounterState = {
  firstBucket: 2,
  secondBucket: 10,
  goal: 4,
  result: [[0, 0]],
  status: "idle",
};

export const getResultAsync = createAsyncThunk(
  "counter/fetchCount",
  async (info: any) => {
    let bucket1 = info.firstBucket;
    let bucket2 = info.secondBucket;
    let endGoal = info.goalNumber;
    console.log(
      `http://localhost:8080/api/buckets/${bucket1}&${bucket2}&${endGoal}`
    );
    const response = await axios
      .get(`http://localhost:8080/api/buckets/${bucket1}&${bucket2}&${endGoal}`)
      .then((response) => {
        return response.data.buckets;
      });
    return response;
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  reducers: {
    incrementFirstBucket: (state) => {
      state.firstBucket += 1;
    },
    decrementFirstBucket: (state) => {
      state.firstBucket -= 1;
    },
    incrementSecondBucket: (state) => {
      state.secondBucket += 1;
    },
    decrementSecondBucket: (state) => {
      state.secondBucket -= 1;
    },
    incrementGoal: (state) => {
      state.goal += 1;
    },
    decrementGoal: (state) => {
      state.goal -= 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getResultAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getResultAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.result = action.payload;
        console.log(action.payload);
      });
  },
});

export const {
  incrementFirstBucket,
  decrementFirstBucket,
  incrementSecondBucket,
  decrementSecondBucket,
  incrementGoal,
  decrementGoal,
} = counterSlice.actions;

export const selectFirstBucket = (state: RootState) =>
  state.counter.firstBucket;
export const selectSecondBucket = (state: RootState) =>
  state.counter.secondBucket;
export const selectGoal = (state: RootState) => state.counter.goal;
export const selectResult = (state: RootState) => state.counter.result;

export default counterSlice.reducer;
